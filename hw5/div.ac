# Gary Tou
# HW 5, Division
# Divides two numbers and prints out the quotient and remainder

                in r1 # input numerator
                in r2  # input denominator

                # Check if denominator is greater than numerator
                sub r3 r2 r1
                bgz r3 &DGN  # denominator is greater than numerator


                # Begin searching for quotient
                lli r3 1  # trial and error division quotient counter
LOOP:           bez r0 &MULTIPLYSTART  # unconditional jump to multiplication function
                # r4 now contains the product of r2 and r3
LOOPCONT:       sub r5 r4 r1
                bez r5 &PERFECTDIV # if numerator perfectly divides denominator
                bgz r5 &EXCESSDIV # if numerator does not perfectly divide into denominator

                # this loop iteration did not find the quotient. increase trial and error counter
                addi r3 r3 1
                bez r0 &LOOP # jump back to loop

PERFECTDIV:     out r3
                lli r7 0
                out r7
                .halt

EXCESSDIV:      addi r3 r3 -1  # the quotient was in the previous loop iteration
                out r3

                # Calculate the remainder
                sub r5 r4 r2  # go back one loop iteration for product
                sub r5 r1 r5  # remainder
                out r5
                .halt




# === MULTIPLICATION FUNCTION ===
# r3: multiplier
# r4: product (output)
# r5: counter
MULTIPLYSTART:  lli r4 0  # Set output to zero
                lli r5 0  # Set counter to zero
MULTIPLYLOOP:   add r4 r4 r2  # add multiplicand (denominator) to output
                addi r5 r5 1  # increment counter
                sub r7 r3 r5  # loops iterations left
                bez r7 &MULTIPLYEND  # if counter reaches multiplier, jump to end of loop
                bez r0 &MULTIPLYLOOP  # unconditional jump to loop if end loop condition not yet (counter < multiplier)
                # output is in r4
MULTIPLYEND:    bez r0 &LOOPCONT
# jump back to function call location

DGN:            lli r7 0
                out r7  # quotient is zero because denominator is greater than numerator
                out r1  # output numerator as the remainder
                .halt


                .halt

