# Gary Tou
# HW 5, Division
# Divides two numbers and prints out the quotient and remainder

                    in r1 # input numerator
                    in r2  # input denominator

                    # Check if denominator is greater than numerator
                    sub r3 r2 r1
                    bgz r3 &DGN  # Jump if denominator is greater than numerator

                    # Begin searching for quotient
                    lli r3 1  # trial and error division quotient counter
LOOP:               bez r0 &MULTIPLYLOOP  # unconditional jump to multiplication function
                    # r4 now contains the product of r2 and r3
LOOPCONT:           sub r5 r4 r1
                    bez r5 &PRINTPERFECTDIV # if numerator perfectly divides denominator
                    bgz r5 &PRINTEXCESSDIV # if numerator does not perfectly divide into denominator

                    # this loop iteration did not find the quotient. increase trial and error counter
                    addi r3 r3 1
                    bez r0 &LOOP # jump back to loop

# Printing for when the two numbers are perfectly divisible
PRINTPERFECTDIV:    out r3
                    lli r7 0
                    out r7
                    .halt

# Printing for when the two numbers are not perfectly divisible (there is a
# remainder)
PRINTEXCESSDIV:    addi r3 r3 -1  # we need to -1 because the quotient was in the
                    # previous loop iteration
                    out r3

                    # Calculate the remainder
                    sub r5 r4 r2  # go back one loop iteration for product
                    sub r5 r1 r5  # remainder
                    out r5
                    .halt


# === MULTIPLICATION FUNCTION ===
# r2: multiplicand (input)
# r3: multiplier (input)
# r4: product (output)
# r5: loops counter (used by function)
# r7: temporary storage (used by function)
MULTIPLYLOOP:       lli r4 0  # Set output to zero
                    lli r5 0  # Set counter to zero
MULTIPLYLOOPBODY:   add r4 r4 r2  # add multiplicand (denominator) to output
                    addi r5 r5 1  # increment counter
                    sub r7 r3 r5  # loops iterations left
                    bez r7 &MULTIPLYLOOPEND  # if counter reaches multiplier, jump to end of loop
                    bez r0 &MULTIPLYLOOPBODY  # unconditional jump to loop if end loop condition not yet (counter < multiplier)
                    # output is in r4
MULTIPLYLOOPEND:    bez r0 &LOOPCONT
# jump back to function call location

DGN:                lli r7 0
                    out r7  # quotient is zero because denominator is greater than numerator
                    out r1  # output numerator as the remainder
                    .halt
