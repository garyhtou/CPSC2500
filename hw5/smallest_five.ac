# Gary Tou
# HW5, Smallest Five
# Prints out the 5 smallest inputed numbers

# ========== CODE ==========

                    # SET UP
                    lli r3 0  # element counter for DATA array. This will tell
                    # us the length of the array at the end of input.

# Collect first user input
                    in r1  # user input (first number)

                    # Validates the first number is >= zero
                    bez r1 &INPUTLOOP  # Jump if the number is >= zero
                    bgz r1 &INPUTLOOP

                    # If the jump above was not made, the inputed number is
                    # less than zero. This is an edge case, print 0.
                    lli r2 0
                    out r2  # output zero
                    .halt

# Save first user input to memory and collect additional inputs until break case
# (the break case is a inputting a negative number).
INPUTLOOP:          lli r2 &DATA  # DATA array starting memory address
                    lui r2 &DATA
                    sw r1 r2 0  # store the first element in the array
                    addi r2 r2 1  # increment the array memory address
                    addi r3 r3 1  # increment the array element counter

                    # Loop for collecting additional elements
INPUTLOOPBODY:      in r1  # get user input
                    bez r1 &INPUTLOOPCONT  # Continue if the input was >= 0
                    bgz r1 &INPUTLOOPCONT

                    # If the jump above was not made, the inputed number is < 0
                    # Break from the loop
                    bez r0 &INTPUTLOOPEND
INPUTLOOPCONT:      sw r1 r2 0 # Save the input for the current array index
                    addi r2 r2 1  # increment the array memory address
                    addi r3 r3 1  # increment the array element counter
                    bez r0 &INPUTLOOPBODY  # Jump to next loop iteration
INTPUTLOOPEND:      bez r0 &CALC  # Jump to the calculation function

# === CALCULATE FUNCTION ===
# Find the five smallest numbers in the DATA array and store them in the RESULT
# array.
# r1: temporary variable (used by function)
# r2: DATA array memory address counter (used by function)
# r3: number of DATA array elements (input)
# r4: temporary storage (used by function)
# r5: temporary storage (used by function)
CALC:               lli r2 &DATA  # data array memory address
                    lui r2 &DATA
                    lli r4 5  # theshold for calculation (>= 5 elements requires
                    # calculation. < 5 doesn't)
                    sub r1 r4 r3  # number of elements shy of 5 elements
                    bgz r1 &PRINTLTFLOOP  # Jump if there are less than 5
                    # elements since no calculation is needed.

                    # If jump was not made, continue onto continue onto
                    # calculation loop since there are 5 or more elements.

# RLOOP stands for "RESULT Loop"
CALC_RLOOP:         lli r1 &RESULT  # RESULT array starting memory address
                    lui r1 &RESULT  # this will be incremented by the loop
CALC_RLOOPBODY:     lli r4 &RESULT  # result array string memory address.
                    lui r4 &RESULT
                    addi r4 r4 5   # ending memory address of result array
                    sub r4 r1 r4  # loops left (negative)
                    bez r4 &CALC_RLOOPEND  # Jump if there are no loops left
                    bgz r4 &CALC_RLOOPEND

                    # If the code is here, there are still loops left
                    bez r0 &CALC_DLOOP  # Jump to nested for loop
CALC_RLOOPCONT:     sw r4 r1 0  # Store the small number in the current RESULT
                    # array element

                    # Replace the element in the current DATA array
                    # element with -1 to signify that this element has been
                    # removed (already used as one of the smallest numbers)
                    lli r5 -1
                    sw r5 r7 0

                    # Now that all of the data processing has been done of this
                    # RESULT array index, let's increment and begin the next
                    # loop interation.
                    addi r1 r1 1  # increment the RESULTS array memory address
                    bez r0 &CALC_RLOOPBODY  # jump to next loop iteration
CALC_RLOOPEND:      bez r0 &PRINTFIVELOOP  # Jump to print the RESULT array


# The DLOOP (DATA loop) is only responsible for finding the small number.
# After running CALC_DLOOP, r4 will contain the smallest number, and r7 will
# contain it's index in the DATA array.
CALC_DLOOP:         lli r2 &DATA  # data array starting memory address
                    lui r2 &DATA  # will be incremented by the loop
                    lli r4 -1  # default smallest number
                    lli r7 -1 # default smallest number's memory address
CALC_DLOOPBODY:     lli r5 &DATA  # data array starting memory address.
                    lui r5 &DATA
                    add r5 r5 r3  # data array ending memory address
                    sub r5 r2 r5  # loops left (negative)
                    bez r5 &CALC_DLOOPEND  # Jump if there are no loops left
                    bgz r5 &CALC_DLOOPEND

                    # If the code is here, there are still loops left

                    # CHECK IF ELEMENT WAS REMOVED
                    lw r5 r2 0  # load the current data array element
                    addi r5 r5 1  # add 1 to the number

                    # If the current DATA array element is equal to -1, then
                    # jump to next loop iteration. (this element was previously
                    # removed from the array)
                    bez r5 &CALC_DLOOPNEXT

                    # If the code is here, the current data array element was not
                    # removed. Therefore, we can consider it for whether it's the
                    # smallest number left in the data array.
                    lw r5 r2 0  # re-load the current data array element (it was
                    # previously modified)

                    # If the smallest number is -1 (default value), initialize
                    # it with the current data array 
                    lli r6 0
                    add r6 r6 r4
                    addi r6 r6 1
                    bez r6 &CALC_DLOOPNEW  # If = -1, jump to set current as the
                    # new smallest number

                    # Check if current number is actually smaller
                    sub r6 r4 r5  # If (smallest - current) > 0, then we have a
                    # new smallest number.
                    bgz r6 &CALC_DLOOPNEW  # Jump to set the new smallest number
                    bez r0 &CALC_DLOOPNEXT  # Jump to the next loop iteration
CALC_DLOOPNEW:      lli r4 0  # Set r4 (smallest) equal to r5 (current data array
                    # element)
                    add r4 r4 r5
                    lli r7 0  # Set r7 (smallest memory address) equal to r2
                    # (current array element)
                    add r7 r7 r2
                    bez r0 &CALC_DLOOPNEXT  # Jump to the next loop iteration
CALC_DLOOPNEXT:     addi r2 r2 1  # increment the memory address of the data array
                    bez r0 &CALC_DLOOPBODY  # jump to the next loop iteration
CALC_DLOOPEND:      bez r0 &CALC_RLOOPCONT  # return back to CALC_RLOOP


# ===== PRINTING LOOPS =====

# PRINTLTFLOOP (Print Less Than Five) prints out the results when there are less than 5
# elements in the data array.
# r3: number of array elements (input)
PRINTLTFLOOP:       lli r1 0  # printing loop counter
PRINTLTFLOOPBODY:   lw r4 r2 0  # load current element
                    out r4  # output the current element
                    addi r1 r1 1  # increment the loop counter
                    addi r2 r2 1  # increment the array element memory address
                    sub r5 r3 r1  # number of loops left
                    bgz r5 &PRINTLTFLOOPBODY  # Jump to next iteration of loop
                    # if there are > 0 loops left
                    .halt  # stop program if there are no printing loops left

# PRINTFIVELOOP prints out the full results array (5 elements)
# The RESULT array should contain the 5 smallest numbers in the array.
PRINTFIVELOOP:      lli r1 &RESULT  # RESULT array starting memory address
                    lui r1 &RESULT  # will be incremented by the loop
PRINTFIVELOOPBODY:  lli r2 &RESULT  # LOOP CHECK CONDITION
                    lui r2 &RESULT
                    addi r2 r2 5  # ending memory address of RESULT array
                    sub r2 r1 r2  # loops left (negative)
                    bez r2 &PRINTFIVELOOPEND  # Jump if the loop is done
                    bgz r2 &PRINTFIVELOOPEND

                    # If the code is here, there are still loops left
                    lw r2 r1 0  # load the current RESULT array element
                    out r2  # print the current RESULT array element
                    addi r1 r1 1  # increment the memory address of the RESULT
                    # array
                    bez r0 &PRINTFIVELOOPBODY  # jump to next loop iteration
PRINTFIVELOOPEND:   .halt  # stop the program. we are done!!

# ========== DATA ==========

RESULT:             .fill -1  # index 0
                    .fill -1  # index 1
                    .fill -1  # index 2
                    .fill -1  # index 3
                    .fill -1  # index 4

# Growing data array. Do not place variables after this
DATA:               .fill -1
